// src/styles/abstracts/_color-functions.scss
@use 'sass:color';
@use 'sass:map';
@use 'sass:math';

// ===================================
// Contrast and Accessibility Functions
// ===================================

/// Calculate relative luminance of a color for contrast checks
/// @param {Color} $color - Input color
/// @return {Number} - Relative luminance (0-1)
/// @example relative-luminance(#ffffff) // returns 1
/// @example relative-luminance(#000000) // returns 0
@function relative-luminance($color) {
  $red: calc(color.channel($color, "red", $space: rgb) / 255);
  $green: calc(color.channel($color, "green", $space: rgb) / 255);
  $blue: calc(color.channel($color, "blue", $space: rgb) / 255);

  $red: if($red <= 0.03928, calc($red / 12.92), pow(($red + 0.055) / 1.055, 2.4));
  $green: if($green <= 0.03928, calc($green / 12.92), pow(($green + 0.055) / 1.055, 2.4));
  $blue: if($blue <= 0.03928, calc($blue / 12.92), pow(($blue + 0.055) / 1.055, 2.4));

  @return (0.2126 * $red) + (0.7152 * $green) + (0.0722 * $blue);
}

/// Determine if black or white text has better contrast on a given background color
/// @param {Color} $background-color - Background color
/// @return {Boolean} - True if black text is better, false if white text is better
/// @example text-color(#ffffff) // returns true (black text is better)
/// @example text-color(#000000) // returns false (white text is better)
@function text-contrast($background-color) {
  $luminance: relative-luminance($background-color);

  // Luminance of black is 0, white is 1
  $luminance-black: 0;
  $luminance-white: 1;

  // Calculate contrast for black text
  $contrast-black: if($luminance > $luminance-black, calc(($luminance + 0.05) / ($luminance-black + 0.05)), calc(($luminance-black + 0.05) / ($luminance + 0.05)));

  // Calculate contrast for white text
  $contrast-white: if($luminance > $luminance-white, calc(($luminance + 0.05) / ($luminance-white + 0.05)), calc(($luminance-white + 0.05) / ($luminance + 0.05)));

  @return $contrast-black > $contrast-white;
}

// ===================================
// Modern SCSS Color Generation Functions
// Using current Sass color module (not deprecated functions)
// ===================================

/// Generate lighter variants using modern color.mix()
/// @param {Color} $color - Base color
/// @param {Number} $percentage - Percentage to lighten (0-100)
/// @return {Color} - Lightened color
@function tint($color, $percentage) {
    @return color.mix(white, $color, $percentage);
}

/// Generate darker variants using modern color.mix()
/// @param {Color} $color - Base color
/// @param {Number} $percentage - Percentage to darken (0-100)  
/// @return {Color} - Darkened color
@function shade($color, $percentage) {
    @return color.mix(black, $color, $percentage);
}

// ===================================
// Method 1: Simple Tint/Shade Generation
// ===================================

/// Generate a complete color palette using tint/shade mixing
/// @param {Color} $base-color - Base color (your 500 weight)
/// @return {Map} - Complete color palette 50-900
@function generate-palette($base-color) {
    @return (50: tint($base-color, 95%), // Very light
        100: tint($base-color, 90%), // Light  
        200: tint($base-color, 75%), // Light
        300: tint($base-color, 50%), // Light-medium
        400: tint($base-color, 25%), // Medium-light
        500: $base-color, // Base color
        600: shade($base-color, 15%), // Medium-dark
        700: shade($base-color, 30%), // Dark
        800: shade($base-color, 45%), // Darker
        900: shade($base-color, 60%) // Very dark
    );
}

// ===================================
// Method 2: HSL-Based Generation (Better Color Theory)
// ===================================

/// Generate palette using modern color.channel() and color.change()
/// @param {Color} $base-color - Base color
/// @return {Map} - Complete color palette with HSL manipulation
@function generate-hsl-palette($base-color) {
    $hue: color.channel($base-color, 'hue');
    $saturation: color.channel($base-color, 'saturation');
    $lightness: color.channel($base-color, 'lightness');

    @return (50: color.change($base-color,
            $saturation: math.max($saturation - 30%, 10%),
            $lightness: math.min($lightness + 40%, 95%)),
        100: color.change($base-color,
            $saturation: math.max($saturation - 20%, 15%),
            $lightness: math.min($lightness + 35%, 90%)),
        200: color.change($base-color,
            $saturation: math.max($saturation - 10%, 20%),
            $lightness: math.min($lightness + 25%, 85%)),
        300: color.change($base-color,
            $lightness: math.min($lightness + 15%, 75%)),
        400: color.change($base-color,
            $lightness: math.min($lightness + 8%, 65%)),
        500: $base-color,
        600: color.change($base-color,
            $saturation: math.min($saturation + 5%, 100%),
            $lightness: math.max($lightness - 8%, 25%)),
        700: color.change($base-color,
            $saturation: math.min($saturation + 10%, 100%),
            $lightness: math.max($lightness - 18%, 20%)),
        800: color.change($base-color,
            $saturation: math.min($saturation + 15%, 100%),
            $lightness: math.max($lightness - 28%, 15%)),
        900: color.change($base-color,
            $saturation: math.min($saturation + 20%, 100%),
            $lightness: math.max($lightness - 38%, 10%)));
}

// ===================================
// Method 3: Scale-Based Generation (Perceptually Uniform)
// ===================================

/// Generate palette using modern color.scale() for better perceptual uniformity
/// @param {Color} $base-color - Base color
/// @return {Map} - Complete color palette using scale adjustments
@function generate-scale-palette($base-color) {
    @return (50: color.scale($base-color, $lightness: 80%, $saturation: -60%),
        100: color.scale($base-color, $lightness: 70%, $saturation: -50%),
        200: color.scale($base-color, $lightness: 50%, $saturation: -30%),
        300: color.scale($base-color, $lightness: 30%, $saturation: -20%),
        400: color.scale($base-color, $lightness: 15%, $saturation: -10%),
        500: $base-color,
        600: color.scale($base-color, $lightness: -10%, $saturation: 10%),
        700: color.scale($base-color, $lightness: -25%, $saturation: 15%),
        800: color.scale($base-color, $lightness: -40%, $saturation: 20%),
        900: color.scale($base-color, $lightness: -60%, $saturation: 25%));
}

// ===================================
// Method 4: Advanced OKLCH Generation (Future-Proof)
// ===================================

/// Generate palette using OKLCH color space for better perceptual uniformity
/// @param {Color} $base-color - Base color
/// @return {Map} - Complete color palette using OKLCH transformations
@function generate-oklch-palette($base-color) {
    // Convert to OKLCH space for better perceptual uniformity
    $oklch-color: color.to-space($base-color, oklch);

    $lightness: color.channel($oklch-color, 'lightness');
    $chroma: color.channel($oklch-color, 'chroma');
    $hue: color.channel($oklch-color, 'hue');

    @return (50: color.to-space(color.change($oklch-color, $lightness: 95%, $chroma: math.max($chroma * 0.3, 0.01)),
            color.space($base-color)),
        100: color.to-space(color.change($oklch-color, $lightness: 90%, $chroma: math.max($chroma * 0.4, 0.01)),
            color.space($base-color)),
        200: color.to-space(color.change($oklch-color, $lightness: 80%, $chroma: $chroma * 0.6),
            color.space($base-color)),
        300: color.to-space(color.change($oklch-color, $lightness: 70%, $chroma: $chroma * 0.8),
            color.space($base-color)),
        400: color.to-space(color.change($oklch-color, $lightness: 60%, $chroma: $chroma * 0.9),
            color.space($base-color)),
        500: $base-color,
        600: color.to-space(color.change($oklch-color, $lightness: 40%, $chroma: math.min($chroma * 1.1, 0.4)),
            color.space($base-color)),
        700: color.to-space(color.change($oklch-color, $lightness: 30%, $chroma: math.min($chroma * 1.2, 0.4)),
            color.space($base-color)),
        800: color.to-space(color.change($oklch-color, $lightness: 20%, $chroma: math.min($chroma * 1.3, 0.4)),
            color.space($base-color)),
        900: color.to-space(color.change($oklch-color, $lightness: 10%, $chroma: math.min($chroma * 1.4, 0.4)),
            color.space($base-color)));
}

// ===================================
// Utility Functions
// ===================================

/// Generate multiple palettes from a map of base colors
/// @param {Map} $base-colors - Map of color names to hex values
/// @param {String} $method - Generation method: 'simple', 'hsl', 'scale', or 'oklch'
/// @return {Map} - Complete color system with all generated palettes
@function generate-color-system($base-colors, $method: 'simple') {
    $result: (
    );

    @each $name, $base-color in $base-colors {
        $palette: null;

        @if $method =='hsl' {
            $palette: generate-hsl-palette($base-color);
        }

        @else if $method =='scale' {
            $palette: generate-scale-palette($base-color);
        }

        @else if $method =='oklch' {
            $palette: generate-oklch-palette($base-color);
        }

        @else {
            $palette: generate-palette($base-color);
        }

        $result: map.merge($result, ($name: $palette));
    }

    @return $result;
}

/// Get a color from the generated palette map with error handling
/// @param {Map} $colors - Complete color system map
/// @param {String} $name - Color name (e.g., 'primary')
/// @param {Number} $weight - Color weight (50-900)
/// @return {Color} - Color value
@function get-color($colors, $name, $weight: 500) {
    $palette: map.get($colors, $name);

    @if not $palette {
        @error "Color '#{$name}' not found. Available colors: #{map.keys($colors)}";
    }

    $color-value: map.get($palette, $weight);

    @if not $color-value {
        @error "Weight '#{$weight}' not found for color '#{$name}'. Available weights: #{map.keys($palette)}";
    }

    @return $color-value;
}

// ===================================
// Color Access Function - For SCSS Use
// ===================================

/// Shortcut function to get color value
/// @param {String} $name - Color name (e.g., 'primary')
/// @param {Number} $weight - Color weight (50-900), default is 500
/// @return {Color} - Color value
/// @example color('primary', 600) // returns the 600 weight of primary color
/// @see get-color()
@function color($name, $weight: 500) {
    @return get-color($colors, $name, $weight);
}

// ===================================
// Color Harmony Functions (Bonus)
// ===================================

/// Generate complementary color palette
/// @param {Color} $base-color - Base color
/// @return {Map} - Complementary color palette
@function generate-complementary($base-color) {
    $complement: color.complement($base-color);
    @return generate-palette($complement);
}

/// Generate triadic color palettes
/// @param {Color} $base-color - Base color
/// @return {Map} - Map with 'primary', 'secondary', 'tertiary' triadic palettes
@function generate-triadic($base-color) {
    $hue: color.channel($base-color, 'hue');
    $saturation: color.channel($base-color, 'saturation');
    $lightness: color.channel($base-color, 'lightness');

    $triad-1: color.change($base-color, $hue: (
            $hue + 120deg)
    );
    $triad-2: color.change($base-color, $hue: (
        $hue + 240deg)
    );

    @return (
        'primary': generate-palette($base-color),
        'secondary': generate-palette($triad-1),
        'tertiary': generate-palette($triad-2)
    );
}

// ===================================
// Generate CSS Root Variables for Colors
// ===================================
@mixin generate-color-properties() {
    @each $color-name, $palette in $colors {
        @each $weight, $color-value in $palette {
            --color-#{$color-name}-#{$weight}: #{$color-value};
        }

        --color-#{$color-name}: var(--color-#{$color-name}-500);
    }

    // Generate semantic aliases
    --color-black: #{$brand-black};
    --color-white: #{$brand-white};
    --color-background: #{color('neutral', 50)};
    --color-surface: #{color('neutral', 100)};
    --color-border: #{color('neutral', 200)};
    --color-text: #{color('neutral', 900)};
    --color-text-muted: #{color('neutral', 600)};
    --color-text-subtle: #{color('neutral', 500)};
}

// ==================================
// Set Brand Base Colors
// ==================================
$brand-black: #353535;
$brand-white: #FFF8E8;

$brand-colors: (
    'primary': #E8871E,
    'secondary': #008148,
    'tertiary': #339966,
    'success': #28a745,
    'danger': #dc3545,
    'warning': #ffc107,
    'info': #17a2b8,
);

// Generate Complete Color System using Scale Method (Excluding Black, White, and Neutral)
$colors: generate-color-system($brand-colors, 'scale');

// Add Neutral Palette Manually
$colors: map.merge($colors, ('neutral': (50: #fefefe,
        100: #f8f9fa,
        200: #e9ecef,
        300: #dee2e6,
        400: #ced4da,
        500: #adb5bd,
        600: #6c757d,
        700: #495057,
        800: #343a40,
        900: #212529,
    ),
));

// ===================================
// Color Harmony Palettes (Optional)
// ===================================

// Generate complementary palette for primary color
// $primary-complement: pf.generate-complementary($brand-primary);

// Generate triadic palettes
// $primary-triadic: pf.generate-triadic($brand-primary);



// ===================================
// Usage Examples
// ===================================

/*
// Simple usage
$primary-base: #3E4095;
$primary-palette: generate-palette($primary-base);

// Multiple palettes
$brand-colors: (
  'primary': #3E4095,
  'secondary': #E63439,
  'success': #10B981,
  'warning': #F59E0B
);

$color-system: generate-color-system($brand-colors, 'scale');

// Access colors
// Using CSS Variables
.example {
  background: var(--color-primary);
  border-color: var(--color-primary-600);
}

// Or
// Using SCSS Function
.example {
  background: color('primary', 500);
  border-color: color('primary', 600);
}
*/